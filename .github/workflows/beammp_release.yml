name: BeamMP Weekly Release and Prerelease Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'BeamMP version to build (e.g. 3.8.2). Leave blank to auto-detect.'
        required: false
      prerelease:
        description: 'Is this a prerelease build?'
        required: false
        default: 'false'
  schedule:
    - cron: "0 0 * * 0"  # Every Sunday at midnight UTC

env:
  IMAGE_NAME: resonatortune/beammp-server
  CONTAINER_FILE: ./Containerfile

jobs:
  determine-version:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}
      prerelease: ${{ steps.setver.outputs.prerelease }}
    steps:
      - uses: actions/checkout@v4

      - name: Determine version and type
        id: setver
        run: |
          PRERELEASE="${{ github.event.inputs.prerelease }}"
          VERSION_INPUT="${{ github.event.inputs.version }}"

          if [[ -n "$VERSION_INPUT" ]]; then
            VERSION="$VERSION_INPUT"
          else
            docker buildx build \
              --target=version-export \
              --build-arg PRERELEASE=$PRERELEASE \
              --file ${{ env.CONTAINER_FILE }} \
              --output type=local,dest=build-meta \
              .
            VERSION=$(cat build-meta/version.txt)
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT

  build-dispatch:
    if: github.event_name == 'workflow_dispatch'
    name: Build (Manual)
    needs: determine-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          builder: default
          platforms: linux/amd64
          context: .
          file: ${{ env.CONTAINER_FILE }}
          push: true
          build-args: |
            PRERELEASE=${{ needs.determine-version.outputs.prerelease }}
            VERSION=${{ needs.determine-version.outputs.version }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.determine-version.outputs.version }}
            ${{ env.IMAGE_NAME }}${{ needs.determine-version.outputs.prerelease == 'true' && ':prerelease' || ':latest' }}
          labels: |
            org.opencontainers.image.version=${{ needs.determine-version.outputs.version }}
            org.opencontainers.image.prerelease=${{ needs.determine-version.outputs.prerelease }}
      
      - name: Update docker hub description
        if: github.ref == 'refs/heads/main'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.IMAGE_NAME }}


  determine-cron-stable:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get latest stable version
        id: setver
        run: |
          docker buildx build \
            --target=version-export \
            --build-arg PRERELEASE=false \
            --file ${{ env.CONTAINER_FILE }} \
            --output type=local,dest=build-meta \
            .
          VERSION=$(cat build-meta/version.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  determine-cron-prerelease:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get latest prerelease version
        id: setver
        run: |
          docker buildx build \
            --target=version-export \
            --build-arg PRERELEASE=true \
            --file ${{ env.CONTAINER_FILE }} \
            --output type=local,dest=build-meta \
            .
          VERSION=$(cat build-meta/version.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-stable-cron:
    if: github.event_name == 'schedule'
    name: Build (Cron - Stable)
    needs: determine-cron-stable
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push stable image
        uses: docker/build-push-action@v6
        with:
          builder: default
          platforms: linux/amd64
          context: .
          file: ${{ env.CONTAINER_FILE }}
          push: true
          build-args: |
            PRERELEASE=false
            VERSION=${{ needs.determine-cron-stable.outputs.version }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.determine-cron-stable.outputs.version }}
            ${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.version=${{ needs.determine-cron-stable.outputs.version }}
            org.opencontainers.image.prerelease=false

  build-prerelease-cron:
    if: github.event_name == 'schedule'
    name: Build (Cron - Prerelease)
    needs: determine-cron-prerelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push prerelease image
        uses: docker/build-push-action@v6
        with:
          builder: default
          platforms: linux/amd64
          context: .
          file: ${{ env.CONTAINER_FILE }}
          push: true
          build-args: |
            PRERELEASE=true
            VERSION=${{ needs.determine-cron-prerelease.outputs.version }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.determine-cron-prerelease.outputs.version }}
            ${{ env.IMAGE_NAME }}:prerelease
          labels: |
            org.opencontainers.image.version=${{ needs.determine-cron-prerelease.outputs.version }}
            org.opencontainers.image.prerelease=true
